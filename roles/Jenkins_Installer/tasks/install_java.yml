---




- name: "Check if java present"
  shell: java -version
  register: javaversion
  failed_when: false


- name: Print Java Version
  debug: javaversion


  
# - name: "Install java if not present"
#   apt: 
#     name: openjdk-11-jre
#     state: present
#   when: javaversion.rc == 127


# - name: Remove Java Packages if they exist
#   package:
#     name: "java"
#     state: absent

# - name: Installing Java required packages
#   package:
#     name: "{{ item }}"
#     state: latest
#   loop:
#     - java-11-openjdk
#     - java-11-openjdk-devel

# - name: Sleep for 30 seconds and continue with play ...
#   wait_for: timeout=30
#   delegate_to: localhost

# - name: Get Init Admin Password
#   shell: cat /var/lib/jenkins/secrets/initialAdminPassword
#   changed_when: false
#   register: adminPasswordResult

# - name: Print init password jenkins
#   debug:
#     var: adminPasswordResult.stdout

# - name: Unlock and add root user
#   jenkins_script:
#     script: |
#       import jenkins.model.*
#       import hudson.security.*
#       def instance = Jenkins.getInstance()
#       def hudsonRealm = new HudsonPrivateSecurityRealm(false)
#       hudsonRealm.createAccount('root', '${user_pwd}')
#       instance.setSecurityRealm(hudsonRealm)

#       def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
#       strategy.setAllowAnonymousRead(false)
#       instance.setAuthorizationStrategy(strategy)
#       instance.save()
#     args:
#       user_pwd: "{{ _container_password }}"
#     user: admin
#     password: "{{ adminPasswordResult.stdout }}"

# - name: Complete Setup Wizard
#   jenkins_script:
#     script: |
#       import static jenkins.model.Jenkins.instance as jenkins
#       import jenkins.install.InstallState
#       if (!jenkins.installState.isSetupComplete()) {
#         InstallState.INITIAL_SETUP_COMPLETED.initializeState()
#       }
#     user: admin
#     password: "{{ adminPasswordResult.stdout }}"

# - name: Install Plugins
#   jenkins_plugin:
#     name: "{{ item }}"
#     state: latest
#     # url_username: admin
#     # url_password: "{{ adminPasswordResult.stdout }}"
#   with_items: 
#     - script-security
#     - command-launcher
#     - blueocean

# - name: Restart Jenkins Service
#   service:
#     name: jenkins
#     state: restarted

# - name: Sleep for 30 seconds and continue with play ...
#   wait_for: timeout=30
#   delegate_to: localhost