- name: '111111111111'
  set_fact:
    randome_number: "{{ 100 | random }}"
- name: '222222222222'
  set_fact:
    _hostname2: "{{ _hostname }}--{{ randome_number }}"
- debug: 
    msg: 
      - "ZZZZZZ: {{ randome_number }}"
      - "YYYYYYYYY: {{ _hostname2 }}"

- name: Cloning virtual machine from Template "{{ _vmid_template }}" with name "{{proxmox_next_vm_id}}-{{ _hostname2 }}"
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    name: "{{ _hostname2 }}"
    node: "{{ node }}"
    clone: "{{ _vmid_template }}"
    vmid: "{{ _vmid_template }}"
    newid: "{{ proxmox_next_vm_id }}"
    # format: raw
    # timeout: 300
    format: unspecified
    full: false




  tags: provission,test

- name: Configuring IP ...
  shell: A=$(qm list |grep "{{ _hostname2 }}" | awk '{print $1}'); qm set $A --ipconfig0 'ip={{ proxmox_next_vm_ip }}/24,gw={{ proxmox_next_container_gw }}'
  tags: provission

- name: Increasing disk ...
  shell: A=$(qm list | grep "{{ _hostname2 }}" | awk '{print $1}'); B=$(qm list | grep "{{ _hostname2 }}" | awk '{print $5}'); qm resize $A {{ vm_default_disk }} {{ _disk }}G
  when: '{{ _disk }} != "0"'
  tags: provission

- name: Configuring Memory ...
  shell: A=$(qm list |grep "{{ _hostname2 }}" | awk '{print $1}'); qm set $A --memory '{{ _memory }}'
  tags: provission

- name: Configuring CPU Cores ...
  shell: A=$(qm list |grep "{{ _hostname2 }}" | awk '{print $1}'); qm set $A --cores '{{ _cores }}'
  tags: provission


- name: Configuring Description ...
  shell: A=$(qm list |grep "{{ _hostname2 }}" | awk '{print $1}'); qm set $A --description '<b>{{ _hostname2 }}:</b><br>- <b>ID:</b> _{{ proxmox_next_vm_id }}_<br>- <b>hostname:</b> _{{ _hostname2 }}_<br>- <b>IP:</b> _{{ proxmox_next_vm_ip }}_<br>- <b>OS:</b> _{{ vm_default_os }}_<br>- <b>User:</b> _{{ vm_default_user }}_<br>- <b>Password:</b> _{{ vm_default_password }}_'
  tags: provission

- name: Create cloud-init config file ...
  shell: |
    cat << EOF > /var/lib/vz/snippets/cloud_init_conf_{{ proxmox_next_vm_id }}.yml
    #cloud-config
    runcmd:
      - hostnamectl set-hostname {{ _hostname2 }}
    ssh_pwauth: true
    EOF
  tags: provission

- name: Configuring cloud-init ...
  shell: A=$(qm list |grep "{{ _hostname2 }}" | awk '{print $1}'); qm set $A --cicustom 'user=local:snippets/cloud_init_conf_{{ proxmox_next_vm_id }}.yml'
  tags: provission

- name: Starting new Virtual Machine in current proxmox node
  community.general.proxmox_kvm:
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    name: "{{ _hostname2 }}"
    node: "{{ node }}"
    state: started
    timeout: 60
  tags: provission
  ignore_errors: true

- name: Waiting 60 Seconds ...
  ansible.builtin.pause:
    seconds: 60    


- name: Update packages in "{{proxmox_next_vm_id}}-{{ _hostname2 }}"
  become: true
  command: qm guest exec {{ _vmid }} --timeout 150 -- bash -c "sudo apt update"
  register: update_packages
  retries: 3
  delay: 20
  until: update_packages.rc == 0

- name: Install OpenSSH in "{{proxmox_next_vm_id}}-{{ _hostname2 }}"
  become: true
  command: qm guest exec {{ _vmid }} --timeout 150 -- bash -c "sudo /home/user/install_openssh-server {{ vm_default_password }}"
  register: install_openssh
  failed_when: >
    not ('QEMU guest agent is not running' in install_openssh.stderr or install_openssh.rc == 0)

- name: Wait for SSH to become available on "{{proxmox_next_vm_id}}-{{ _hostname2 }}"
  wait_for:
    host: "{{ proxmox_next_vm_ip }}"
    port: 22
    timeout: 400
    state: started
  tags: provission
  

# - name: Restart machine
#   delegate_to: "{{ proxmox_next_vm_ip }}"
#   reboot: