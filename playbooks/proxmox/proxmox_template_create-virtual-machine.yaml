---
- name: Create new Virtual Machine in Proxmox [{{ _node }}] from Template
  become: yes
  gather_facts: No
  hosts: "{{ host }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  collections:
    - community.general

  tasks:
    # - name: Clone Virtual Machine
    #   proxmox_kvm:
    #     api_user: "{{ _api_user }}"
    #     api_password: "{{ hostvars[host].ansible_password }}"
    #     api_host: "{{ _api_host }}"
    #     clone: "{{ _vmid_template }}"
    #     vmid: "{{ _vmid_template }}"
    #     newid: "{{ _vmid }}"
    #     name: "{{ _hostname }}"
    #     node: "{{ _node }}"
    #     storage: local-lvm
    #     format: raw
    #     timeout: 300
    #   loop_control:
    #     pause: 5

    - name: Cloning virtual machine from "{{ _vmid_template }}" with name "{{ _hostname }}"
      proxmox_kvm:
        api_user: "{{ _api_user }}"
        api_password: "{{ hostvars[host].ansible_password }}"
        api_host: "{{ _api_host }}"
        name: "{{ _hostname }}"
        node: "{{ _node }}"
        clone: "{{ _vmid_template }}"
        vmid: "{{ _vmid_template }}"
        newid: "{{ _vmid }}"
        storage: local-lvm
        format: raw
        timeout: 300
      tags: provission,test

    - name: Increasing disk if it is necessary
      shell: A=$(qm list | grep "{{ _hostname }}" | awk '{print $1}'); B=$(qm list | grep "{{ _hostname }}" | awk '{print $5}'); qm resize $A {{ _default_disk }} {{ _disk }}G
      when: '{{ _disk }} != "0"'
      tags: provission

    # - name: Waiting to apply cloud init changes in disk
    #   wait_for:
    #   timeout: 5
    #   tags: provission

    # - name: starting new Virtual Machine to change IPv4 configuration, it is necessary
    #   proxmox_kvm:
    #     api_user : "{{ _api_user }}"
    #     api_password: "{{ hostvars[host].ansible_password }}"
    #     api_host : "{{ _api_host }}"
    #     name : "{{ _hostname }}"
    #     node : "{{ _node }}"
    #     state : started
    #     timeout: 300
    #   when: '"{{ _disk }}" != "0"'
    #   register: wait
    #   tags: provission

    # - name: Waiting to start virtual server machine completely
    #   wait_for:
    #     timeout: 45
    #   when: wait.changed == true
    #   tags: provission

    # - name: Resize disk
    #   shell: growpart "{{ default_volume }}" "{{ default_partition }}"; pvresize "{{ default_volume }}""{{ default_partition }}"
    #   when: '"{{ _disk }}" != "0"'
    #   delegate_to: "{{ template_name }}"
    #   tags: provission

    # - name: stopping new Virtual Machine to change IPv4 configuration, it is necessary
    #   proxmox_kvm:
    #     api_user : "{{ _api_user }}"
    #     api_password: "{{ hostvars[host].ansible_password }}"
    #     api_host : "{{ _api_host }}"
    #     name : "{{ _hostname }}"
    #     node : "{{ _node }}"
    #     state : stopped
    #     timeout: 300
    #   when: '"{{ VM_network }}" != "vlan10" or "{{ _disk }}" != "0"'
    #   tags: provission

    # - name: Loading set up for Virtual Machine. Assigning correct bridge in network interface
    #   shell: A=$(qm list |grep "{{ _hostname }}" | awk '{print $1}'); qm set $A - net0 'virtio,bridge=vmbr{{ item.value.vmbr }}'
    #   when: '"{{ VM_network }}" != "vlan10"'
    #   with_dict: "{{ vars[VM_network] }}"
    #   tags: provission

    # - debug:
    #     msg: "item.key {{ item.key }} item.value {{ item.value }} item.value.netmask 24 item.value.vmbr {{ item.value.vmbr }}"
    #   with_dict: "{{ vars[VM_network] }}"
    #   tags: provission

    - name: Loading set up for Virtual Machine. Assigning IP, sockets, cores, memory and description for Virtual Machine
      shell: A=$(qm list |grep "{{ _hostname }}" | awk '{print $1}'); qm set $A --ipconfig0 'ip={{ _network_ip }}/24,gw={{ _network_gw }}' --memory '{{ _memory }}' --cores '{{ _cores }}' --description "## **{{ _hostname }}:** 
      \- **ID:** _{{ _vmid }}_
      \- **hostname:** _{{ _hostname }}_
      \- **IP:** _{{ _network_ip }}_
      \- **OS:** _x_"
      when: '"{{ _network_ip }}" != "automatic"'
      # with_dict: "{{ vars[VM_network] }}"
      tags: provission

    # - debug:
    #     var: current_ip
    #   tags: provission

    # - name: Loading set up for Virtual Machine. Assigning IP automatically, sockets, cores and memory for Virtual Machine
    #   shell: A=$(qm list |grep "{{ _hostname }}" | awk '{print $1}'); qm set $A - ipconfig0 'ip={{ current_ip.stdout }}/24,gw={{ _network_gw }}' - nameserver '{{ item.value.dnsservers }}' - searchdomain '{{ item.value.searchdomain }}' - memory '{{ _memory }}' - sockets '{{ VM_sockets }}' - cores '{{ _cores }}'
    #   when: '"{{ _network_ip }}" == "automatic"'
    #   with_dict: "{{ vars[VM_network] }}"
    #   tags: provission

    # - debug:
    #     var: "{{ PV_node }}"

    # - name: Migrating Virtual Machine if it is necessary
    #   shell: A=$(qm list |grep "{{ _hostname }}" | awk '{print $1}');qm migrate $A "{{ PV_node }}"
    #   when: '"{{ PV_node }}" != "none"'
    #   tags: provission

    - name: starting new Virtual Machine in current proxmox node
      proxmox_kvm:
        api_user: "{{ _api_user }}"
        api_password: "{{ hostvars[host].ansible_password }}"
        api_host: "{{ _api_host }}"
        name: "{{ _hostname }}"
        node: "{{ _node }}"
        state: started
        timeout: 300
      # when: '"{{ PV_node }}" == "none"'
      tags: provission

    # - name: starting new Virtual Machine in correct proxmox node
    #   proxmox_kvm:
    #     api_user : "{{ _api_user }}"
    #     api_password: "{{ hostvars[host].ansible_password }}"
    #     api_host : "{{ PV_node }}"
    #     name : "{{ _hostname }}"
    #     node : "{{ _node }}"
    #     state : started
    #     timeout: 300
    #   delegate_to: "{{ PV_node }}"
    #   when: '"{{ PV_node }}" != "none"'
    #   tags: provission



