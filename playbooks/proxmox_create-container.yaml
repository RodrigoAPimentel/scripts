---
- name: Create new LXC container in Proxmox [{{ _node }}]
  become: yes
  gather_facts: No
  hosts: "{{ host }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  collections:
    - community.general

  tasks:
    - name: Create Container
      # proxmox:
      proxmox:
        vmid: "{{ _vmid }}" # Specifying Container ID
        node: "{{ _node }}" # Name of Proxmox host
        api_user: "{{ _api_user }}" # Proxmox user
        api_password: "{{ hostvars[host].ansible_password }}" # Password in plaintext !!!
        api_host: "{{ _api_host }}" # Proxmox hostname
        state: "{{ _state }}"
        hostname: "ct-{{ _container_hostname }}" # Container hostname
        password: "{{ _container_password  }}" # Password in plaintext !!!
        ostemplate: "{{ _ostemplate }}" # Or use local:vztmpl/... as discussed
        cores: "{{ _cores }}"
        disk: "{{ _disk }}"
        memory: "{{ _memory }}"
        swap: "{{ _memory }}"
        storage: "local-lvm" # Or use 'local' as discussed
        netif: '{"net0":"name=eth0,gw={{ _network_gw }},ip={{ _network_ip }}/24,bridge=vmbr0"}'
        unprivileged: yes
        onboot: "{{ _onboot }}"

        description: "teste descrição"
        features:
          - nesting="{{ _nesting.stdout}}"
          - keyctl="{{ _keyctl.stdout }}"
      loop_control:
        pause: 5

    - name: Start Container
      proxmox:
        vmid: "{{ _vmid }}"
        api_user: "{{ _api_user }}"
        api_password: "{{ hostvars[host].ansible_password }}"
        api_host: "{{ _api_host }}"
        state: started

- name: Add Host in Ansible AWX
  become: yes
  gather_facts: No
  hosts: "{{ _create_host_host }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3
  collections:
    - awx.awx

  tasks:
    - name: Collect AWX root token
      command: |
        docker exec awx_task /bin/bash -c 'awx-manage create_oauth2_token --user root'
      register: awx_token

    - name: Add host in inventory
      host:
        name: "ct-{{ _container_hostname }}"
        description: "{{ _create_host_description }}"
        inventory: "{{ _create_host_inventory }}"
        state: present
        controller_host: "http://{{ hostvars[_create_host_host].ansible_host }}"
        controller_oauthtoken: "{{ awx_token.stdout }}"
        validate_certs: false
        variables:
          ansible_host: "{{ _network_ip }}"

    # - name: Delete host in Ansible AWX
    #   delegate_to: 127.0.0.1
    #   host:
    #     name: "ct-{{ _container_hostname }}"
    #     inventory: "{{ _create_host_inventory }}"
    #     state: absent
    #     controller_host: "http://{{ hostvars[_create_host_host].ansible_host }}"
    #     controller_oauthtoken: "{{ awx_token.stdout }}"
    #     validate_certs: false
